{"version":3,"sources":["Models/IconsMap.tsx","Models/MessageInterface.tsx","logo.svg","Fonts/Roboto-Regular.ttf","Fonts/Roboto-Black.ttf","Models/index.tsx","Components/CityInputComponent.tsx","Components/WeatherInfoComponent.tsx","Components/BackgroundComponent.tsx","Components/WeatherWeeklyInfoComponent.tsx","Components/MessagesComponent.tsx","Services/WeatherApiService.tsx","App.tsx","Fonts/fonts.tsx","index.tsx"],"names":["IconsMap","MessageColors","module","exports","CityInputField","styled","input","CityInputLabel","label","CityInputArrow","i","CityInputComponent","props","cityInputRef","data-testid","htmlFor","style","position","type","name","placeholder","value","city","onChange","e","target","onKeyPress","key","fetchWeather","blur","onFocus","setIsInputFocused","onBlur","ref","CityInputRef","onClick","className","TemperatureSpan","span","TemperatureIcon","WeatherInfoComponent","textAlign","filter","isInputFocused","weatherInfo","weather","main","Math","floor","temp","AppDiv","div","BackgroundComponent","background","temperature","children","days","DailyWeathersContainer","UpcomingDaysRow","WeatherIcon","WeatherWeeklyInfoComponent","upcomingDays","weatherDailyInfo","slice","map","dt","dateTime","date","Date","getDay","getDayName","day","MessageContainer","MessageWrapper","MessageTitle","h3","MessagesComponent","messages","message","index","bottom","title","details","WeatherApiService","apiKey","apiUrl","axios","get","this","params","q","appid","units","then","success","data","catch","response","error","code","status","statusText","lat","lon","exclude","weathersInfo","BlackSpan","weatherApi","App","useState","setCity","mounted","setMounted","undefined","setWeatherInfo","setWeatherDailyInfo","setMessages","useCallback","getCurrentWeather","weatherResponse","getWeeklyWeather","coord","weathersResponse","daily","prevMessages","setTimeout","splice","useEffect","src","logo","alt","length","createGlobalStyle","RobotoRegular","RobotoBlack","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.56b1a5b3.chunk.js","sourcesContent":["/**\r\n * There are main grouping of the weather\r\n * Besides that there are sub groups of the weather which specifies the weather more accurate.\r\n * For the test purposes we keep only general grouping, on live applications makes sense to make full mapping\r\n * to provide better user experience.\r\n */\r\nexport const IconsMap: {[name: string] : string} = {\r\n  'Thunderstorm': 'wi-thunderstorm',\r\n  'Drizzle': 'wi-sprinkle',\r\n  'Rain': 'wi-rain',\r\n  'Snow': 'wi-snow',\r\n  'Mist': 'wi-fog',\r\n  'Smoke': 'wi-smoke',\r\n  'Haze': 'wi-day-haze',\r\n  'Dust': 'wi-dust',\r\n  'Fog': 'wi-fog',\r\n  'Sand': 'wi-sandstorm',\r\n  'Ash': 'wi-volcano',\r\n  'Squall': 'wi-volcano',\r\n  'Tornado': 'wi-tornado',\r\n  'Clear': 'wi-day-sunny',\r\n  'Clouds': 'wi-cloud',\r\n};","\r\nexport const MessageColors = {\r\n  'success': 'rgb(183, 241, 204)',\r\n  'warning': 'rgb(230, 234, 170)',\r\n  'error': 'rgb(234, 170, 170)'\r\n}\r\n\r\nexport interface MessageInterface {\r\n  type: 'success' | 'warning' | 'error',\r\n  title: string;\r\n  details?: string;\r\n}\r\n","module.exports = __webpack_public_path__ + \"static/media/logo.1435f496.svg\";","module.exports = __webpack_public_path__ + \"static/media/Roboto-Regular.11eabca2.ttf\";","module.exports = __webpack_public_path__ + \"static/media/Roboto-Black.5ebb24ee.ttf\";","export * from './WeatherInfo';\r\nexport * from './IconsMap';\r\nexport * from './MessageInterface';\r\n","import React, { KeyboardEvent } from 'react';\nimport styled from 'styled-components';\nimport 'weather-icons/css/weather-icons.min.css';\n\nconst CityInputField = styled.input`\n  width: 100%;\n  border-radius: 20px;\n  border: none;\n  font-size: 1.5em;\n  text-align: center;\n  box-shadow: 0px 2px 10px 3px rgba(0, 0, 0, 0.2);\n  transition: box-shadow .5s;\n  box-sizing: border-box;\n  \n  /* This causes city name to be behind arrow if name is too long. Though there is no city name that long. Anyway, bug to fix */\n  padding: 15px 0; \n\n  &:focus {\n    outline: none;\n    box-shadow: 0px 0px 13px 5px rgb(247, 191, 176); // TODO Make dynamic based on actual bg color\n  }\n`;\n\nconst CityInputLabel = styled.label`\n  display: block;\n  margin: 30px 10px 20px;\n`;\n\nconst CityInputArrow = styled.i`\n  position: absolute;\n  right: 0;\n  height: 100%;\n  width: 8%;\n\n  &:hover {\n    cursor: pointer;\n\n    &:before {\n      left: calc(50% + 5px);\n    }\n  }\n\n  &:before {\n    transition: left .5s;\n    font-size: 3em;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n  }\n`;\n\nexport function CityInputComponent(props: {\n    city: string; onChange: (e:string) => void; \n    fetchWeather: () => void; \n    setIsInputFocused: (isFocused: boolean) => void;}\n  ) {\n  let cityInputRef: HTMLInputElement | null;\n\n  const onKeyPress = (e: KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === 'Enter') {\n      props.fetchWeather();\n      !!cityInputRef && cityInputRef.blur();\n    }\n  }\n\n  return (\n    <div>\n      <CityInputLabel data-testid=\"city-input-label\" htmlFor=\"city\">Type in your location and we will tell you what weather to expect.</CityInputLabel>\n      <div style={{ position: 'relative' }}>\n        <CityInputField type=\"text\" data-testid=\"city-input-field\"\n          name=\"city\" \n          placeholder=\"Type your city\" \n          value={props.city} \n          onChange={(e) => props.onChange(e.target.value) }\n          onKeyPress={(e) => onKeyPress(e) }\n          onFocus={() => props.setIsInputFocused(true)}\n          onBlur={() => props.setIsInputFocused(false)}\n          ref={(CityInputRef) => { cityInputRef = CityInputRef; }}/>\n        <CityInputArrow data-testid=\"city-input-arrow\" onClick={ () => props.fetchWeather() } className=\"wi wi-right\" />\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport { WeatherInfo, IconsMap } from '../Models';\r\n\r\nconst TemperatureSpan = styled.span`\r\n  font-family: 'roboto-black';\r\n  display: block;\r\n  margin-top: 20px;\r\n  font-weight: 900;\r\n  font-size: 6em;\r\n`;\r\n\r\nconst TemperatureIcon = styled.i`\r\n  font-size: 0.30em;\r\n  vertical-align: middle;\r\n  margin-right: 10px;\r\n`;\r\n\r\nexport function WeatherInfoComponent(props: { weatherInfo: WeatherInfo; isInputFocused: boolean; }) {\r\n  return (\r\n    <div data-testid=\"weather-info-container\" style={{ textAlign: 'center', filter: `blur(${props.isInputFocused ? '10px' : '0'})` }}>\r\n      <TemperatureSpan data-testid=\"weather-temperature\">\r\n        <TemperatureIcon data-testid=\"weather-icon\"\r\n          className={'wi ' + IconsMap[props.weatherInfo.weather[0].main] } />{ Math.floor(props.weatherInfo.main.temp) }&#176;\r\n      </TemperatureSpan>\r\n    </div>\r\n  );\r\n}\r\n","import React, { ReactElement } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst AppDiv = styled.div`\r\n  text-align: left;\r\n  max-width: 1024px;\r\n  margin: 0 auto;\r\n  padding: 30px;\r\n  position: relative;\r\n  transitions: background .5s; /* Make animated color transition */ \r\n`;\r\n\r\nexport function BackgroundComponent(props: { children: ReactElement[], temperature?: number; }) {\r\n  const getBackgroundColor = (): string => {\r\n    if (!props.temperature) {\r\n      return 'linear-gradient(-180deg, rgb(247, 191, 176) 0%, rgb(223, 210, 127) 100%)'\r\n    }\r\n    \r\n    return `linear-gradient(-180deg, ${props.temperature > 15 ? 'rgb(247, 191, 176)' : 'rgb(176, 247, 220)' } 0%, rgb(223, 210, 127) 100%)`;\r\n  }\r\n  \r\n  return (\r\n    <AppDiv data-testid=\"app-background-div\" style={{ background: getBackgroundColor() }}>\r\n      {props.children}\r\n    </AppDiv>\r\n  );\r\n}","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport { WeatherDailyInfo, IconsMap } from '../Models';\r\n\r\n// We are not concerned about translations now, though good practice would be to write\r\n// or use some library to handle the day names\r\nvar days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\nconst DailyWeathersContainer = styled.div`\r\n  max-width: 335px;\r\n  margin: 0 auto;\r\n  font-size: 1.2em;\r\n\r\n  > div {\r\n    height: 60px;\r\n    align-items: center;\r\n    display: flex;\r\n    justify-content: space-between;\r\n  }\r\n`;\r\n\r\nconst UpcomingDaysRow = styled.div`\r\n  &:hover {\r\n    cursor: pointer;\r\n    box-shadow: 0 4px 4px -4px black;\r\n\r\n    i {\r\n      transform: translateX(10px);\r\n    }\r\n  }\r\n\r\n\r\n  i { \r\n    font-size: 3em;\r\n    transition: transform .2s;\r\n  }\r\n`;\r\n\r\nconst WeatherIcon = styled.i`\r\n  font-size: 1.2em;\r\n  margin-left: 10px;\r\n`\r\n\r\nexport function WeatherWeeklyInfoComponent(props: { \r\n  weatherDailyInfo: Array<WeatherDailyInfo>,\r\n  isInputFocused: boolean,\r\n}) {\r\n  const upcomingDays = props.weatherDailyInfo.slice(0, 5);\r\n  const getDayName = (dateTime: number) => {\r\n    const date = new Date(dateTime * 1000);\r\n    return days[date.getDay()];\r\n  }\r\n\r\n  return (\r\n    <DailyWeathersContainer data-testid=\"daily-weather-container\" style={{ filter: `blur(${props.isInputFocused ? '10px' : '0'})` }}>\r\n      {\r\n        upcomingDays.map((weatherInfo) => \r\n          <div data-testid=\"weather-info-wrapper\" key={weatherInfo.dt}>\r\n            <span data-testid=\"weather-day-name\">{getDayName(weatherInfo.dt)}</span>\r\n            <div>\r\n              <span data-testid=\"weather-temperature\">{Math.floor(weatherInfo.temp.day)}&#176;</span>\r\n              <span>\r\n                <WeatherIcon className={'wi ' + IconsMap[weatherInfo.weather[0].main]} />  \r\n              </span>\r\n            </div>\r\n          </div>\r\n        )\r\n      }\r\n      <UpcomingDaysRow>\r\n        <span>Upcoming Days</span>\r\n        <div>\r\n          <i className=\"wi wi-right\" />\r\n        </div>\r\n      </UpcomingDaysRow>\r\n    </DailyWeathersContainer>\r\n  );\r\n}","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport { MessageInterface, MessageColors } from '../Models';\r\n\r\nconst MessageContainer = styled.div`\r\n  position: absolute;\r\n  bottom: 20px;\r\n  right: 20px;\r\n`;\r\n\r\nconst MessageWrapper = styled.div`\r\n  width: 240px;\r\n  padding: .5em;\r\n  box-shadow: 0 0 7px 0 gray;\r\n  border-radius: 10px;\r\n  right: 20px;\r\n  margin-top: 20px;\r\n`;\r\n\r\nconst MessageTitle = styled.h3`\r\n  margin: 0 0 5px;\r\n  font-family: 'roboto-black';\r\n`;\r\n\r\nexport function MessagesComponent(props: { messages: MessageInterface[] }) {\r\n  return (\r\n    <MessageContainer data-testid=\"messages-container\">\r\n      {\r\n        props.messages.map((message, index) => \r\n            <MessageWrapper data-testid=\"messages-wrapper\" key={ index } style={{ background: MessageColors[message.type], bottom: `calc(${40 + (index * 40) }px)` }}>\r\n              <MessageTitle title=\"Message Header\">{ message.title }</MessageTitle>\r\n              {\r\n                !!message.details && \r\n                (\r\n                  <div data-testid=\"message-details\">\r\n                    <hr />\r\n                    <p>{ message.details }</p>\r\n                  </div>\r\n                )\r\n              }\r\n            </MessageWrapper>\r\n        )\r\n      }\r\n    </MessageContainer>\r\n  )\r\n}","import axios from 'axios';\r\nimport { WeatherDailyInfo, WeatherInfo } from '../Models';\r\n\r\nexport class WeatherApiService {\r\n  private readonly apiKey = 'bcb9e9da67519afea21288f74d064516';\r\n  private readonly apiUrl = 'https://api.openweathermap.org/data/2.5/';\r\n\r\n  getCurrentWeather(city: string): Promise<{ \r\n      success: boolean; \r\n      weatherInfo?: WeatherInfo;\r\n      error?: {\r\n        code: number;\r\n        message: string;\r\n      }}> {\r\n    return axios.get<WeatherInfo>(this.apiUrl + 'weather', {\r\n      params: {q: city, appid: this.apiKey, units: 'metric' }\r\n    })\r\n    .then(({ data }) => ({ success: true, weatherInfo: data }))\r\n    .catch(({ response }) => ({ success: false, error: {\r\n      code: response.status as number,\r\n      message: response.statusText,\r\n    }}));\r\n  };\r\n\r\n  getWeeklyWeather(lat: number, lon: number): Promise<{ \r\n      success: boolean; \r\n      weathersInfo?: { daily: Array<WeatherDailyInfo> }; \r\n    }> {\r\n    return axios.get<any>(this.apiUrl + 'onecall', {\r\n      params: {lat, lon, appid: this.apiKey, units: 'metric', exclude: 'current,hourly,minutely' }\r\n    })\r\n    .then(({ data }) => ({ success: true, weathersInfo: data }))\r\n    .catch(() => ({ success: false }));\r\n  };\r\n}\r\n","import React, { useState, useEffect, useCallback } from 'react';\nimport styled from 'styled-components';\n\nimport logo from './logo.svg';\nimport { BackgroundComponent, CityInputComponent, WeatherInfoComponent, WeatherWeeklyInfoComponent, MessagesComponent } from './Components';\nimport { WeatherApiService } from './Services';\nimport { MessageInterface, WeatherDailyInfo, WeatherInfo } from './Models';\n\nconst BlackSpan = styled.span`\n  font-family: roboto-black;\n`;\n\nconst weatherApi = new WeatherApiService();\n\nfunction App() {\n  const [ city, setCity ] = useState('Berlin');\n  const [ mounted, setMounted ] = useState(false);\n  const [ isInputFocused, setIsInputFocused ] = useState(false);\n  const [ weatherInfo, setWeatherInfo ] = useState(undefined as WeatherInfo | undefined);\n  const [ weatherDailyInfo, setWeatherDailyInfo ] = useState([] as Array<WeatherDailyInfo>);\n  const [ messages, setMessages ] = useState([] as Array<MessageInterface>);\n\n  const handleCityChange = (e: string) => {\n    setCity(e);\n  }\n\n  const fetchWeather = useCallback(() => {\n    if (!!city && (!!weatherInfo ? weatherInfo.name !== city : true)) {\n      weatherApi.getCurrentWeather(city).then((weatherResponse) => {\n        if (weatherResponse.success && weatherResponse.weatherInfo) {\n          setWeatherInfo(weatherResponse.weatherInfo);\n\n          /**\n           * Unfortunately we cannot get the lat and long of the city directly from the \n           * input field, thought the api that I have picked doesn't have free endpoint to \n           * provide the daily forecast, instead of mocking the data I decided to send the request\n           * after current weather is detected. The response of the current request contains lat long in\n           * case if the city is found, then the data can be used to receive daily forecast with lat and long\n           */\n          weatherApi.getWeeklyWeather(\n            weatherResponse.weatherInfo.coord.lat, \n            weatherResponse.weatherInfo.coord.lon)\n          .then((weathersResponse) => {\n            if (!!weathersResponse.success && !!weathersResponse.weathersInfo) {\n              setWeatherDailyInfo(weathersResponse.weathersInfo.daily);\n            }\n\n            // No need to carry error handling here\n            // If previous request worked well then no chance this request will fail\n          });\n        }\n\n        if (!weatherResponse.success && weatherResponse.error?.code === 404) {\n          setMessages((prevMessages) => \n            [...prevMessages, { type: 'error', title: 'The Requested City is not found', details: weatherResponse.error?.message }]);\n\n          setTimeout(() => {\n            setMessages((messages) => messages.splice(-1, 1));\n          }, 3000);\n        }\n      })\n    }\n  }, [city, weatherInfo]);\n\n  useEffect(() => {\n    if (!mounted) {\n      fetchWeather();\n      setMounted(true);\n    }\n  }, [mounted, fetchWeather]);\n\n  return (\n    <div style={{ textAlign: 'center' }}>\n      <BackgroundComponent temperature={weatherInfo?.main.temp}>\n        <header>\n          <div>\n            <img data-testid=\"app-logo\" src={logo} className=\"App-logo\" alt=\"logo\" />\n          </div>\n          <BlackSpan>whatweather?</BlackSpan>\n        </header>\n        <main>\n          <CityInputComponent city={ city } onChange={ handleCityChange } fetchWeather={ fetchWeather } setIsInputFocused={ setIsInputFocused } />\n          { !!weatherInfo && <WeatherInfoComponent weatherInfo={ weatherInfo } isInputFocused={ isInputFocused } /> }\n          { !!weatherDailyInfo.length && <WeatherWeeklyInfoComponent weatherDailyInfo={ weatherDailyInfo } isInputFocused={ isInputFocused } /> }\n        </main>\n        <MessagesComponent messages={ messages } />\n      </BackgroundComponent>\n    </div>\n  );\n}\n\nexport default App;\n","import { createGlobalStyle } from 'styled-components';\n\nimport RobotoRegular from './Roboto-Regular.ttf';\nimport RobotoBlack from './Roboto-Black.ttf';\n\nexport default createGlobalStyle`\n    @font-face {\n        font-family: 'roboto-regular';\n        src: local('Roboto Regular'), local('RobotoRegular'),\n        url(${RobotoRegular}) format('truetype');\n    }\n\n    @font-face {\n        font-family: 'roboto-black';\n        src: local('Roboto Black'), local('RobotoBlack'),\n        url(${RobotoBlack}) format('truetype');\n    }\n\n    body {\n        font-family: 'roboto-regular'; // Default font family\n    }\n`;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport './App.css';\nimport Fonts from './Fonts/fonts'; // TODO Make the fonts to be loaded only once at start\n\nReactDOM.render(\n  <React.StrictMode>\n    <Fonts />\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}